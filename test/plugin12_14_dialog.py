# -*- coding: utf-8 -*-
"""
/***************************************************************************
 plugin12_14Dialog
                                 A QGIS plugin
 wtyczka dla grupy 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Krzysztof Łoza, Małgorzata Chodowiec, Miłosz Średnicki
        email                : krzysztof.loza03@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsMessageLog, Qgis, QgsProject, QgsPointXY
from qgis.utils import iface
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QDialog, QApplication, QMessageBox

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'plugin12_14_dialog_base.ui'))


class plugin12_14Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(plugin12_14Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton_dh.clicked.connect(self.calculate_dh)
        self.pushButton_area.clicked.connect(self.calculate_area)
    
    def calculate_dh(self):
        selected_layer = self.mMapLayerComboBox.currentLayer()
        
        if selected_layer is None:
            msg = QMessageBox()
            msg.setText('Nie wybrano żadnej warstwy')
            msg.setWindowTitle("Brak danych")
            msg.exec_()
            
        
        
        features = selected_layer.selectedFeatures()
        
        if len(features) != 2:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText('Nie zaznaczono wymaganej ilości punktów.')
            msg.setWindowTitle("Nieprawidłowa ilość danych")
            msg.exec_()
            
        if len(features) == 2:
            h_1 = float(features[0]['wysokosc'])
            h_2 = float(features[1]['wysokosc'])
            dh = h_2 - h_1
            self.label_dh_result.setText(f'{dh} m')
            QgsMessageLog.logMessage('Wartość przewyższenia pomiędzy danymi punktami wynosi: {} m'.format(dh), level = Qgis.Success)
            iface.messageBar().pushMessage('Różnica wysokości','Różnica wysokości została obliczona', level = Qgis.Success)
            
        
    def calculate_area(self):
        selected_layer = self.mMapLayerComboBox.currentLayer()
        features = selected_layer.selectedFeatures()
        wsp_X = []
        wsp_Y = []
        for punkty in features:
            geom = punkty.geometry()
            x = float(geom.asPoint().x())
            y = float(geom.asPoint().y())
            wsp_X.append(x)
            wsp_Y.append(y)
        if selected_layer is None:
            QMessageBox.warning(self, "Nie wybrano żadnej warstwy")
            return
        
        if len(features) < 3:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText('Należy zaznaczyć minimum 3 punkty')
            msg.setInformativeText("Nieprawidłowa ilość danych")
            msg.setWindowTitle("Za mało danych")
            msg.exec_()
            
        if len(features) >= 3:
            x_y = []
            for i in range(0, len(wsp_X)):
                x_y.append([wsp_X[i], wsp_Y[i]])
           
            area_0 = 0
            for i in range(len(x_y)):
                if i == len(x_y)-1:
                    area_0 += (x_y[i][0] + x_y[0][0]) * (x_y[i][1] - x_y[0][1])
                else: 
                    area_0 += (x_y[i][0] + x_y[i+1][0]) * (x_y[i][1] - x_y[i+1][1])
            
            area = abs(area_0/2)
            area = round(area/10000, 3)
            self.label_area_result.setText(f'{area} ha')
            QgsMessageLog.logMessage('Pole powierzchni pomiędzy wybranymi punktami wynosi: {} ha'.format(area), level = Qgis.Success)
            iface.messageBar().pushMessage("Pole powierzchni", 'Pole powierzchni zostało obliczone', level = Qgis.Success)
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
































